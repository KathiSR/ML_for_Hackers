get()
x<<-9
get()
x <-9
get()
x < 1:9
x <- 1:9
get()
x <<- 1:9
get()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x <- 9
get()
ls()
x <<- 9
ls()
get()
v <- makeVector()
v$setmean
function(mean)
exit
source('~/.active-rstudio-document')
v <-- makeCacheMatrix()
y = 1:20
v <-- makeCacheMatrix(y)
rm(list=ls())
source('~/.active-rstudio-document')
makeCacheMatrix(5)
v <- makeCacheMatrix(5)
v
v$get
v$set(1:20)
v$get
v <- makeCacheMatrix()
v
v$set(1:20)
v$get
v$get()
source('~/Documents/Coursera/R/cacheSolve.R')
x <- matrix(1:20, 4,5)
x
cacheSolve(x)
x <- matrix(rnorm(20), 4,5)
cacheSolve(x)
x <- makeCacheMatrix
cacheSolve(x)
x <- makeCacheMatrix
x <- makeCacheMatrix()
y <- matrix(rnorm(20),4,5)
y
x <- makeCacheMatrix(y)
x
cacheSolve(x)
y <- matrix(rnorm(16),4,4)
x <- makeCacheMatrix(y)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
size(y)
attributes(y)
dim(y)
y <- matrix(rnorm(20),5,4)
makeCacheMatrix(y)
x <- makeCacheMatrix(y)
y
source('~/Documents/Coursera/R/makeCacheMatrix.R')
dim(y)
size(y)
size <- dim(y)
size[1,1]==size[1,2]
size
size[1,1]
dim(size)
size[1] == size[2]
source('~/.active-rstudio-document')
x <- makeCacheMatrix(y)
library(datasets)
data(iris)
?iris
iris
?tapply
dim(iris)
iris$species
iris(, "species")
iris[, "species"]
iris[, "Species"]
iris[iris[ ,5] == "setosa", "Species"]
tapply(iris[,"Seplal.Length"], iris[,"Species"], mean)
tapply(iris[,"Seplal.Length"], iris[,"Species"], mean)
iris[,"Species"]
iris[,"Seplal.Length"]
tapply(iris[,"Sepal.Length"], iris[,"Species"], mean)
rowMeans(iris[, 1:4])
colMeans(iris)
library(datasets)
data(mtcars)
mtcars
mtcars$cyl
attributes(mtcars$cyl)
x <- mycars$cyl
x <- mtcars$cyl
class(x)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
x<-tapply(mtcars$hp, mtcars$cyl, mean)
x
x[1]-x[3]
debug(ls)
ls
?mean
blah
blah
blah
^L
^L
(^L)
?mean
url <- "http://games.crossfit.com/leaderboard"
library(httr)
html <- GET(url)
content2 <- content(html, as = "text")
library(XML)
parsedHTML <- htmlParse(content2, asText = TRUE)
parsedHTML
names(parsedHTML)
xmlName(parsedHTML)
doc <- xmlTreeParse(url, useInternalNodes=TRUE)
url
data <- GET(url)
data
content2 <- content(data, as = "text")
content2
parsedHTML <- htmlParse(content2, asText = TRUE)
parsedHTML
url
data <- GET(url)
data
content2 <- content(data, as = "text")
head(content)
content
parsedHTML <- htmlParse(content2, asText = TRUE)
parsedHTML
parsedHTML <- htmlTreeParse(url, useInternalNodes=TRUE)
parsedHTML
xpathSApply(html, "//title", xmlValue)
rootNode <- xmlRoot(html)
url = "http://games.crossfit.com/athlete/12485"
data <- GET(url)
content2 <- content(data, as = "text")
content2
parsedHTML <- htmlParse(content2, asText = TRUE)
parsedHTML
xpathSApply(parsedHTML, "//title", xmlValue)
xpathSApply(parsedHTML, "//Fran", xmlValue)
xpathSApply(parsedHTML, "//text", xmlValue)
xpathSApply(parsedHTML, "//height", xmlValue)
xpathSApply(parsedHTML, "//Height", xmlValue)
xpathSApply(parsedHTML, "//zone-branding-wrapper", xmlValue)
if(!file.exists("./data")) {dir.create("./data")}
url <- "https://data.baltimorecity.gov/Culture-Arts/Restaurants/k5ry-ef3g"
download.file(url, destfile = "./data/restaurants.csv", method = "curl")
restData <- read.csv("./data/restaurants.csv")
head(restData)
names(restData)
class(restData)
if(!file.exists("./data")) {dir.create("./data")}
url <- "https://data.baltimorecity.gov/Culture-Arts/Restaurants/k5ry-ef3g"
download.file(url, destfile = "./data/restaurants.csv", method = "curl")
restData <- read.csv("./data/restaurants.csv")
head(restData)
if(!file.exists("./data")) {dir.create("./data")}
url <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(url, destfile = "./data/restaurants.csv", method = "curl")
restData <- read.csv("./data/restaurants.csv")
url <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(url, destfile = "./data/restaurants.csv", method = "curl")
restData <- read.csv("./data/restaurants.csv")
head(restData)
summary(restData)
x <- data(UCBAdmissions)
x
class(x)
DF <- as.data.frame(UCBAdmissions)
summary(DF)
UCBAdmissions
class(UCBAdmissions)
DF <- as.data.frame(UCBAdmissions)
names(restData)
xt <- xtabs(Freq, ~ neighborhood + policeDistrict, data = restData)
summary(DF)
summary(restData)
xt <- xtabs(freq, ~ neighborhood + policeDistrict, data = restData)
?xt
??xt
?xtabs
?xtabs
xt <- xtabs(Freq  ~ neighborhood + policeDistrict, data = restData)
xt <- xtabs(Freq ~ neighborhood + policeDistrict, data = restData)
xtabs(Freq~Gender+Admit, data = DF)
xt <- xtabs(Freq~neighborhood + policeDistrict, data = restData)
xt <- xtabs(Freq~neighborhood+policeDistrict, data = restData)
xt <- xtabs(zipCode~neighborhood+policeDistrict, data = restData)
xt
DF
url = "https://www.fitbit.com/activities"
library(httr)
data = GET(url)
data
content2 <- content(data, as = "text")
content2
content2 <- content(data, as = "text")
content2
parsedHTML <- htmlParse(content2, asText = TRUE)
parsedHTML <- htmlTreeParse(url, useInternalNodes=TRUE)
librar(XML)
library(XML)
parsedHTML <- htmlTreeParse(url, useInternalNodes=)
content2
parsedHTML <- htmlParse(content2, asText = TRUE)
parsedHTML
xpathSApply(parsedHTML, "title", xmlValue)
xpathSApply(parsedHTML, "GoalWeight", xmlValue)
xpathSApply(parsedHTML, "pager", xmlValue)
xmlName(parsedHTML)
source('~/Documents/Coursera/R/data/UCI HAR Dataset/ActivityRecognition/runAnalysis.R')
url <- "https://s3.amazonaws.com/coursera-uploads/user-e188807d53b14b759054db81/972582/asst-3/4ea82c8015ac11e4a6dbdbc226e96545.txt"
download.file(url, "./data.txt", method = "curl")
ls
read.table("data.txt")
head(data)
data <- read.table("data.txt")
head(data)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
summary(BodyWeight)
?splom
?trellis.par.set
library(datasets)
data(airquality)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
library(ggplot)
install.packages(ggplot)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
var=201401
url=paste(“http://stats.grok.se/json/en/”,var,“/web_scraping”,sep=“”)
url
browseURL(url)
var  = 201401
url = paste("http://stats.grok.se/json/en/", var, "/web_scraping", sep = "")
url
browseURL(url)
raw.data <- readLines(url, warn = "F")
library(rjson)
require(rjson)
install.packages(rjson)
install.packages("rjson")
require(rjson)
rd <- fromJSON(raw.data)
rd
names(rd)
rd.views <= rd$daily_views
rd.views <- rd$daily_views
rd.views
class(rd.views)
rd.views <- unlist(rd.views)
class(rd.views)
df <- as.data.frame(rd.views)
df
require(ggplo2)
require(ggplot2)
require(lubridate)
df$date <- as.Date(rownames(df))
colnames(df) <- c("views", "date")
ggplot(df,aes(date,views)) + geom_line() + geom_smooth() + theme_bw(base_size = 20)
df
rd
mean(1:5)
??plotting
apropos("ggplot")
apropos("vector")
library(ggplot)
library(ggplot2)
library(ggplot2)
apropos("ggplot")
apropos("z$")
apropos("[4-9]")
example(plot)
example(mean)
example(std)
example(str)
demo(plot)
demo(Japanese)
browseVignettes()
p <- c(.1, .2, .3, .4)
x <- 2 : 5
0.52-0.225
install.packages("R.matlab")
source('~/Documents/OReilly/ML_for_Hackers/01-Introduction/Ch1.R', echo=TRUE)
ufo$dateOccurred <- as.Date(ufo$dateOccurred, format = "%Y%m%d")
source('~/.active-rstudio-document', echo=TRUE)
head(ufo[which(nchar$DateOccurred) != 8 | nchar(ufo$DateReported) != 8, 1])
class(ufo)
head(ufo[which(nchar(ufo$DateOccurred) != 8 | nchar(ufo$DateReported) != 8, 1])
head(ufo[which( nchar(ufo$DateOccurred) != 8 | nchar(ufo$DateReported) != 8, 1)])
names(ufo)
head(ufo[which(nchar(ufo$DateOccurred) != 8 | nchar(ufo$DateReported != 8),1])
head(ufo[which(nchar(ufo$DateOccurred) != 8 | nchar(ufo$DateReported != 8)),1])
nchar(ufo$DateOccurred) != 8
which(nchar(ufo$DateOccurred) != 8)
which(nchar(ufo$DateOccurred) != 8 | nchar(ufo$DateReported) != 8)
head(ufo[which(nchar(ufo$DateOccurred) != 8 | nchar(ufo$DateReported) != 8),1])
head(ufo[which(nchar(ufo$DateOccurred) != 8 | nchar(ufo$DateReported) != 8),1], n = 20)
good.rows <- ifelse(nchar(ufo$DateOccurred) >!=8 | nchar(ufo$DateReported) >!= 8), FALSE, TRUE)
good.rows <- ifelse(nchar(ufo$DateOccurred) !>=8 | nchar(ufo$DateReported) !>= 8), FALSE, TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
sum(good.rows)
dim(good.rows)
length(good.rows)
ufo <- ufo[good.rows, ]
dim(ufo)
as.Date
?as.Date
head(ufo$DateOccurred)
ufo$DateOccurred <- as.Date(ufo$DateOccurred, format = '%Y%m%d')
source('~/.active-rstudio-document', echo=TRUE)
head(ufo)
names(ufo)
head(ufo$Location)
?strsplit
str = ufo$Location[1]
str
x <- tryCatch(strsplit(str, ",")[[1]], error = function(e) return(c(NA,NA)))
x
length(x)
gsub("^ ", "", x)
?lapply
get.location <- function(l) { #define function get.location for cleaning location data
split.location <- tryCatch(strsplit(l, ",")[[1]], error = function(e) return(c(NA,NA))) #split location entry at the ,
clean.location <- gsub("^ ", "", split.location) #get rid of leading white space
if (length(clean.location) > 2) { #make sure that clean.location only contains two entries (city, state)
return(c(NA, NA))
}
else {
return(clean.location)
}
}
city.state <- lapply(ufo$Location, get.location) #apply get.location to each row in ufo dataset
head(city.state)
?do
?do.call
location.matrix <- do.call(rbind, city.state)
location.matrix
head(location.matrix)
location.matrix[,1]
location.matrix[,2]
source('~/.active-rstudio-document', echo=TRUE)
dim(location.matrix)
dim(ufo)
?transform
source('~/Documents/OReilly/ML_for_Hackers/01-Introduction/Ch1.R', echo=TRUE)
us.states <- c("ak", "al", "ar", "az", "ca", "co", "ct", "de", "fl", "ga", "hi", "ia", "id", "il", "in", "ks", "ky", "la", "ma", "md", "me", "mi
", "mn", "mo", "ms", "mt", "nc", "nd", "ne", "nh", "nj", "nm", "nv", "ny", "oh", "ok", "or", "pa", "ri", "sc"
"sd", "tn", "tx", "ut", "va", "vt", "wa", "wi", "wv", "wy") #list of all US states
ufo$USState <- us.states[match(ufo$USState, us.states)]
us.states <- c("ak", "al", "ar", "az", "ca", "co", "ct", "de", "fl", "ga", "hi", "ia", "id", "il", "in", "ks", "ky", "la",
"ma", "md", "me", "mi", "mn", "mo", "ms", "mt", "nc", "nd", "ne", "nh", "nj", "nm", "nv", "ny", "oh", "ok",
"or", "pa", "ri", "sc", "sd", "tn", "tx", "ut", "va", "vt", "wa", "wi", "wv", "wy") #list of all US states
ufo$USState <- us.states[match(ufo$USState, us.states)]
head(ufo$USState)
ufo$USState
ufo$USCity[is.NA(ufo$USState)] <- NA
ufo$USCity[is.na(ufo$USState)] <- NA
ufo.us <- subset(ufo, !is.na(ufo$USState))
head(ufo.us)
setwd('~/Documents/OReilly/ML_for_Hackers/01-Introduction/data/ufo')
source('~/.active-rstudio-document', echo=TRUE)
summary(ufo.us$DateOccurred)
#ML_forHackers_CH1
quick.hist <- ggplot(ufo.us, aes(x = DateOccurred)) + geom_histogram()
quick.hist <- ggplot(ufo.us, aes(x = DateOccurred)) + geom_histogram()
quick.hist <- ggplot(ufo.us, aes(x = DateOccurred)) + geom_histogram() + scale_x_date(major = "50 years")
print(quick.hist)
?scale_x_date
source('~/.active-rstudio-document', echo=TRUE)
nrow(ufo.us)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
names(ufo.us)
sightings.counts <- ddply(ufo.us, .(USState, YearMonth), nrow)
head(sightings.counts)
date.range <- seq.Date(from = as.Date(min(ufo.us$DateOccurred)), to = as.Date(max(ufo.us$DateOccurred)), by = "month")
head(date.range)
date.strings <- strftime(date.range, "%Y-%m")
states.dates <- lapply(us.states, function(s) cbind(s, date-strings))
states.dates <- lapply(us.states, function(s) cbind(s, date.strings))
head(states.dates)
class(states.dates)
dim(states.dates)
states.dates <- data.frame(do.call(rbin, states.dates), stringsAsFactors=FALSE)
states.dates <- data.frame(do.call(rbind, states.dates), stringsAsFactors=FALSE)
class(states.dates)
names(states.dates)
all.sightings <- merge(states.dates, sightings.counts, by.x = c("s", "date.strings"), by.y = c("USState", "YearMonth"), all = TRUE)
head(all.sightings)
all.sightings$V1[is.na(all.sightings$V1)] <- 1
head(all.sightings)
ate.strings <- strftime(date.range, "%Y-%m")
states.dates <- lapply(us.states, function(s) cbind(s, date.strings))
states.dates <- data.frame(do.call(rbind, states.dates), stringsAsFactors=FALSE)
all.sightings <- merge(states.dates, sightings.counts, by.x = c("s", "date.strings"), by.y = c("USState", "YearMonth"), all = TRUE)
all.sightings$V1[is.na(all.sightings$V1)] <- 0
head(all.sightings)
all.sightings$YearMonth <- as.Date(all.sightings$YearMonth)
all.sightings$State <- as.factor(all.sightings$State)
names(all.sightings) <- c("State", "YearMonth", "Sightings")
all.sightings$Sightings[is.na(all.sightings$Sightings)] <- 0
all.sightings$YearMonth <- as.Date(all.sightings$YearMonth)
all.sightings$State <- as.factor(all.sightings$State)
all.sightings$YearMonth
all.sightings$YearMonth <- as.Date(all.sightings$YearMonth, "%Y-%m")
head(all.sightings$YearMonth)
all.sightings <- merge(states.dates, sightings.counts, by.x = c("s", "date.strings"), by.y = c("USState", "YearMonth"), all = TRUE)
names(all.sightings) <- c("State", "YearMonth", "Sightings")
all.sightings$Sightings[is.na(all.sightings$Sightings)] <- 0
head(all.sightings)
class(all.sightings$YearMonth)
names(all.sightings) <- c("State", "YearMonth", "Sightings")
all.sightings$Sightings[is.na(all.sightings$Sightings)] <- 0
all.sightings$YearMonth <- as.Date(rep(date.range, length(us.states))
all.sightings$State <- as.factor(toupper(all.sightings$State))
names(all.sightings) <- c("State", "YearMonth", "Sightings")
all.sightings$Sightings[is.na(all.sightings$Sightings)] <- 0
all.sightings$YearMonth <- as.Date(rep(date.range, length(us.states)))
all.sightings$State <- as.factor(toupper(all.sightings$State))
head(all.sightings)
state.plot <- ggplot(all.sightings, aes(x = YearMonth, y = Sightings)) +
geom_line(aes(color = darkblue))+
facet_wrap(~State, nrow = 10, ncol = 5)+
theme_bw() +
scale_color_manual(values = c("darkblue" = "darkblue"), legend = FALSE) +
xlab("Time") + ylab("Number of Sightings")+
opts(title = "Number of UFO sightings by Month-Year and US State (1990 - 2010")
print(state.plot)
state.plot <- ggplot(all.sightings, aes(x = YearMonth, y = Sightings)) +
geom_line(aes(color = darkblue))+
facet_wrap(~State, nrow = 10, ncol = 5)+
theme_bw()
print(state.plot)
state.plot <- ggplot(all.sightings, aes(x = YearMonth, y = Sightings)) +
geom_line(aes(color = "darkblue"))+
facet_wrap(~State, nrow = 10, ncol = 5)+
theme_bw() +
scale_color_manual(values = c("darkblue" = "darkblue"), legend = FALSE) +
xlab("Time") + ylab("Number of Sightings")+
opts(title = "Number of UFO sightings by Month-Year and US State (1990 - 2010")
print(state.plot)
state.plot <- ggplot(all.sightings, aes(x = YearMonth, y = Sightings)) +
geom_line(aes(color = "darkblue"))+
facet_wrap(~State, nrow = 10, ncol = 5)+
theme_bw()
print(state.plot)
state.plot <- ggplot(all.sightings, aes(x = YearMonth, y = Sightings)) +
geom_line(aes(color = "darkblue"))+
facet_wrap(~State, nrow = 10, ncol = 5)+
theme_bw() +
scale_color_manual(values = c("darkblue" = "darkblue"), legend = FALSE) +
xlab("Time") + ylab("Number of Sightings")+
opts(title = "Number of UFO sightings by Month-Year and US State (1990 - 2010")
print(state.plot)
state.plot <- ggplot(all.sightings, aes(x = YearMonth, y = Sightings)) +
geom_line(aes(color = "darkblue"))+
facet_wrap(~State, nrow = 10, ncol = 5)+
theme_bw() +
xlab("Time") + ylab("Number of Sightings")+
opts(title = "Number of UFO sightings by Month-Year and US State (1990 - 2010")
print(state.plot)
state.plot <- ggplot(all.sightings, aes(x = YearMonth, y = Sightings)) +
geom_line(aes(color = "darkblue"))+
facet_wrap(~State, nrow = 10, ncol = 5)+
xlab("Time") + ylab("Number of Sightings")+
opts(title = "Number of UFO sightings by Month-Year and US State (1990 - 2010")
print(state.plot)
